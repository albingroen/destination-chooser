{"version":3,"sources":["config.js","comps/Map/index.js","comps/Destination/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","compose","withProps","googleMapURL","concat","apiKey","loadingElement","react_default","a","createElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","lib","defaultOptions","styles","mapsStyle","defaultZoom","defaultCenter","lat","lng","center","isMarkerShown","position","destination","icon","url","Number","path","options","strokeColor","strokeOpacity","strokeWeight","Destination","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","cityContainer","handleChange","bind","assertThisInitialized","e","setState","target","_this2","setDestination","_this$state","seCities","cities","filter","city","country","map","push","className","type","onChange","placeholder","length","name","toUpperCase","includes","index","key","onClick","Component","App","destinationChosen","deg","Math","PI","lat1","lon1","lat2","lon2","dLat","deg2rad","dLon","sin","cos","d","atan2","sqrt","round","_this$props","coords","isGeolocationAvailable","latitude","longitude","comps_Destination","htmlFor","destinationDistance","React","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c878e26e.chunk.js","sourcesContent":["module.exports = \"AIzaSyAHFkbhHMtXhADOWYR645JeaxjYP5wJ3Z0\"\n","import React from \"react\";\nimport { compose, withProps } from \"recompose\";\nimport {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  Polyline\n} from \"react-google-maps\";\n\n// In the mapsStyle json file you can paste any map style you would like. Hint: snazzymaps\nimport mapsStyle from \"../../mapsStyle.json\";\n\n// Create a config file and export your API-key / or just enter it directly\nimport apiKey from \"../../config\";\n\nexport const Map = compose(\n  // Set your API key and size of the map here\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${apiKey}`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `100vh` }} />,\n    mapElement: <div style={{ height: `100%` }} />\n  }),\n  withScriptjs,\n  withGoogleMap\n)(props => (\n  <GoogleMap\n    defaultOptions={{ styles: mapsStyle }}\n    defaultZoom={7}\n    defaultCenter={{ lat: props.lat, lng: props.lng }}\n    center={{ lat: props.lat, lng: props.lng }}\n  >\n    {props.isMarkerShown && (\n      <Marker position={{ lat: props.lat, lng: props.lng }} />\n    )}\n\n    {props.destination && (\n      <div>\n        <Marker\n          icon={{\n            url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n          }}\n          position={{\n            lat: Number(props.destination.lat),\n            lng: Number(props.destination.lng)\n          }}\n        />\n\n        {/* The Polyline component renders a line between your position and your entered destination */}\n        <Polyline\n          path={[\n            { lat: props.lat, lng: props.lng },\n            {\n              lat: Number(props.destination.lat),\n              lng: Number(props.destination.lng)\n            }\n          ]}\n          options={{\n            strokeColor: \"dodgerblue\",\n            strokeOpacity: 1,\n            strokeWeight: 2\n          }}\n        />\n      </div>\n    )}\n  </GoogleMap>\n));\n","import React, { Component } from \"react\";\nimport cities from \"cities.json\";\nimport \"./style.css\";\n\nclass Destination extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: \"\",\n      cityContainer: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      value: e.target.value,\n      cityContainer: true\n    });\n  }\n\n  render() {\n    const { setDestination } = this.props;\n    const { value, cityContainer } = this.state;\n\n    // Limiting cities to only cities in Sweden to improve performance\n    const seCities = [];\n\n    cities\n      .filter(city => {\n        return city.country === \"SE\";\n      })\n      .map(city => {\n        return seCities.push(city);\n      });\n\n    return (\n      <div className=\"destinationContainer\">\n        <div>\n          <input\n            type=\"text\"\n            value={value}\n            onChange={this.handleChange}\n            placeholder=\"Where do you want to go?\"\n          />\n        </div>\n\n        {cityContainer && (\n          <ul>\n            {seCities &&\n              seCities.length > 0 &&\n              seCities\n                .filter(city => {\n                  return city.name.toUpperCase().includes(value.toUpperCase());\n                })\n                .map((city, index) => {\n                  return (\n                    <li\n                      key={(city, index)}\n                      onClick={() => {\n                        setDestination(city);\n                        this.setState({ value: \"\", cityContainer: false });\n                      }}\n                    >\n                      {city.name}\n                    </li>\n                  );\n                })}\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Destination;\n","import React from \"react\";\nimport { geolocated } from \"react-geolocated\";\nimport { Map } from \"./comps/Map/index\";\nimport Destination from \"./comps/Destination\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      destinationChosen: false,\n      destination: {}\n    };\n  }\n\n  // Function for transforming degrees to radians\n  deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n  // Function for calulating distance in km between 2 coordinates\n  destinationDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Radius of the earth in km\n    const dLat = this.deg2rad(lat2 - lat1); // this.deg2rad below\n    const dLon = this.deg2rad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.deg2rad(lat1)) *\n        Math.cos(this.deg2rad(lat2)) *\n        Math.sin(dLon / 2) *\n        Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c; // Distance in km\n    return Math.round(d);\n  }\n\n  render() {\n    const { coords, isGeolocationAvailable } = this.props;\n    const { destination, destinationChosen } = this.state;\n\n    return !isGeolocationAvailable ? (\n      <div className=\"page-wrapper\">\n        <h2>Please allow location for this to work</h2>\n      </div>\n    ) : coords ? (\n      <div>\n        {destinationChosen ? (\n          <Map\n            isMarkerShown\n            lat={coords.latitude}\n            lng={coords.longitude}\n            destination={destination}\n          />\n        ) : (\n          <Map isMarkerShown lat={coords.latitude} lng={coords.longitude} />\n        )}\n\n        <Destination\n          setDestination={city =>\n            this.setState({ destination: city, destinationChosen: true })\n          }\n        />\n\n        {/* Here we just render some cards with information about the destination */}\n        {destinationChosen && (\n          <div>\n            <div className=\"destinationInfo\">\n              <label htmlFor=\"distance\">Distance (km)</label>\n              <h2>\n                {this.destinationDistance(\n                  coords.latitude,\n                  coords.longitude,\n                  Number(destination.lat),\n                  Number(destination.lng)\n                )}{\" \"}\n                km\n              </h2>\n            </div>\n\n            <div className=\"destinationInfo2\">\n              <label htmlFor=\"distance\">Distance (m)</label>\n              <h2>\n                {this.destinationDistance(\n                  coords.latitude,\n                  coords.longitude,\n                  Number(destination.lat),\n                  Number(destination.lng)\n                ) / 10}{\" \"}\n                m\n              </h2>\n            </div>\n\n            <div className=\"destinationInfo3\">\n              <label htmlFor=\"distance\">Destination</label>\n              <h2>{destination.name}</h2>\n            </div>\n          </div>\n        )}\n      </div>\n    ) : (\n      <div className=\"page-wrapper\">\n        <h2>Fetching location information...</h2>\n      </div>\n    );\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false\n  },\n  userDecisionTimeout: 5000\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}